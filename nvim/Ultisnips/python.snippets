snippet cm "some comments" b
### 
# ${1}

${0}
endsnippet

snippet uw "underworld import modules" b
import underworld as uw
import underworld.function as fn
import underworld.visualisation as vis
import math
import numpy as np
import os
import datetime
import h5py
import operator

mpi = uw.mpi

restart = 0
inputPath = os.path.join(os.path.abspath('.'),"input/")
outputPath = os.path.join(os.path.abspath('.'),"output/")

if mpi.rank == 0:
    import os
    if not os.path.exists(outputPath):
        os.mkdir(outputPath)
		bufsize = 0
		outfile = open(outputPath+'time.txt','w+',bufsize)
		outfile.write('Step, Time, Time_Myr, dTime_kyr\n')
mpi.barrier()

if mpi.rank==0:
	print('Model setup begins at '+str(datetime.datetime.now()))

${0}
endsnippet

snippet constant "underworld init config" b

####
####  Physical Constants
####

#### Absolute values

# step and time
time = 0.0 # Initial time
step = 0 # Initial timestep
maxSteps = 401 # Maximum timesteps
steps_output = 5 # output every X timesteps

myr2s = 365.25 * 24 * 3600 * 1e6

### 
# basic units

g = 9.8
h = 1000e3
eta0 = 1e21 # eta0 should be consistent with various Ra numbers
rho = 3.3e3 # km/m^3

RefStrainRate = 2.0e-15 # reference strain rate, check Yang et al., 2018

###
# temperature distribution 

alpha = 3.0e-5
kappa = 1e-6
Cp = 1200 # J/kg/K#

minViscosity = 1e-2
maxViscosity = 1.0e4

tempMin = 0.0
tempMax = 1.0

HeatProductionM = 7.38e-12 # J/s/kg Mantle heat production rate
HeatProductionC = 3.69e-10 # J/s/kg Continental crust heat production rate

# phase transition
clapeyronSlope410 = 3e6 #Clapeyron slope, MPa/K
clapeyronSlope660 = -1.5e6

#### Relative values

###
# viscosity

# diffusion creep viscosity		eta_diff = viscP*exp((viscE+viscV(1-z))/T+T0-(viscE+viscV)/(Tm+T0))
viscP0 = [2.0, 2.0, 30] # Viscosity prefactor of each layer (upper mantle, transition zone, lower mantle)
viscE0 = [15.0, 15.0, 1.0]
viscV0 = [0.0, 0.0, 0.0]  
viscT0 = [1.0, 1.0, 1.0]

# dislocation creep viscosity  see Yang et al., 2018
viscN = [3.0, 3.0, 1.0] # exponent for dislocation rheology for each layer

###
# density

drhoOPC = -400. # Overiding plate crust density variation relative to reference value (mantle), km/m^3
drhoOPM = -0.01 * rho # Overiding plate mantle density variation relative to reference value (mantle)
drhoSlabC = 0. # Oceanic crust
drhoSlabM = 0. # Oceanic mantle

###
# Important positions 

zref410 = 1. - 410e3 / h # reference height for 410 km phase boundary
Ra410 = 0.05 * rho # density jump across the phase boundary

zref660 = 1. - 660e3 / h
Ra660 = 0.1 * rho

zViscLayer = [zref410, zref660] # interface of each viscosity layer, one element fewer than visc0

###
# Strain rate
RefStrainRateSlab = RefStrainRate # RefStrainRateSlab can be higher than RefStrainRate due to dehydration

###
# temperature distribution 

dT = 1350. # which temp 
dTdz = 0.0 # Adiabatic temperature gradient for viscosity calculation   
TM = 450. / dT #Moho Temperature    

Tm = tempMax # mantle temperature
Tsurf = 273. / dT # temp unit K or oC ?
Tref410 = Tm # reference temperature
Tref660 = Tm

###
# Initial composition distribution

hSlabCrust = 10e3 / h # oceanic crust
hSlabLith = 70e3 / h # oceanic lith
hUpperPlateCrust= 40e3 / h # continental crust
hUpperPlateLith= 120e3 / h # continental lith

hWeakZone= 5e3 / h # Weak zone decoupling the subducting and overriding plates is defined by a line of passive particles embeded hLowerPlateCrust + dhBeneathWeakOC deep in the oceanic slab

phaseWidth410 = 50e3 / h # transitional width
phaseWidth660 = 50e3 / h

###
# Other Configurations

# Initial slab radius and depth
SlabRadius = 250e3 / h
hSlabInitial= 250e3 / h

tPeriodInnerV = 20. # The imposed velocity change period, Myr 


#### Nondimensional parameters

tao = h ** 2 / kappa / myr2s # Nondimensional time, Myr 
tPeriodInnerV = tPeriodInnerV / tao

HeatProductionM = HeatProductionM * (h ** 2) / (kappa * Cp * dT)
HeatProductionC = HeatProductionC * (h ** 2) / (kappa * Cp * dT)

Ra = rho * g * alpha * dT * h ** 3 / kappa / eta0   
RM = rho * g * h ** 3 / kappa / eta0 # reference Mantle Rayleigh number, for lithostatic pressure rho*g*h^3/kapa/eta0, rho=3300 kg/m^3# 
RcOPC = drhoOPC * g * h ** 3 / kappa / eta0 # Overiding plate crust rayleigh number drho*g*h^3/kapa/eta0, drho=500 kg/m^3# 
RcOPM = drhoOPM * g * h ** 3 / kappa / eta0 # Overiding plate crust rayleigh number drho*g*h^3/kapa/eta0, drho=1%# 
RcSlabC = drhoSlabC * g * h ** 3 / kappa / eta0
RcSlabM = drhoSlabM * g * h ** 3 / kappa / eta0 

Ra410 = Ra410 * g * h ** 3 / kappa / eta0 
Ra660 = Ra660 * g * h ** 3 / kappa / eta0 
clapeyronSlope410 = clapeyronSlope410 * dT / rho / g / h 
clapeyronSlope660 = clapeyronSlope660 * dT / rho / g / h 

StressScale = h ** 2 / eta0 / kappa # From dimensional to non-dim
RefStrainRate = RefStrainRate * h ** 2 / kappa
RefStrainRateSlab = RefStrainRateSlab * h ** 2 / kappa

###
# Penalty: small penalty for direct solver and large penalty for iterative solver

LargePenalty = True 

endsnippet

snippet box "settings model box" b 

xx1 = 0.
xx4 = len0/h0
xx2 = xx4/2-(lenOp/2+.6)
xx3 = xx4/2+(lenOp/2+.6)
 
nx1 = 0 
nx2 = nx1+100
nx3 = nx2+int((xx3-xx2)*200)
nx4 = nx3+100

xx = (xx1,xx2,xx3,xx4) # positions of corresponding markers
nx = (nx1,nx2,nx3,nx4) # points of above markers order

zz1 = 0.
zz4 = 1.
zz2 = yz4 - 850.e3/h # we only concern the mantle top of 850 km for simplify
zz3 = yz4 - 250.e3/h # asthenoshpere depth

nz1 = 0
nz2 = nz1 + 20
nz3 = nz2 + 80
nz4 = nz3 + 50

zz = (zz1,zz2,zz3,zz4)
nz = (nz1,nz2,nz3,nz4)

###
# "sticky air" or water layer

hwater= ${2:0.} 
ywater = zz[-1] - hwater

### 
# resolution and model box 

resX = nx[-1]-nx[1]
resY = nz[-1]-nz[0]
boxLength = xx[-1] - xx[0]
boxHeight = zz[-1] - zz[0]

### 
# if mesh grid space are not average in one direction, you need to rearrage and smooth it 

# meshSmoothWidthX = 10
# meshSmoothWidthY = 10

z0 = refine_coord1D(zz, nz, meshSmoothWidthY)
x0 = refine_coord1D(xx, nx, meshSmoothWidthX)

uw.mpi.barrier()


endsnippet
snippet functions "common functions in underworld" b

def StepWiseFun(xx, x0, width):
    """Return a continuous step function

    Parameters
    ----------
    xx : array-like
        the target of a series numbers

    x0 : specific value
        the step center

    width :  specific value
        the step width


    Returns
    -------
    Array-like 
        a series continuous value of x0 center and width step fuction

    """
    zz = (xx - x0) / width
    return 0.5 * (1.0 + fn.math.tanh(zz))


def LazerValFun(LayerVal0, LayerZ0, coord, width):
    """ Smooth discretized values of each layer to get a continuous function

    ----  LayerZ0[0]

                        LayerVal0[0]

    ----  LayerZ0[1]

                        LayerVal0[1]

    ----  LayerZ0[2]

                        LayerVal0[2]

    ----  LayerZ0[3]

    Parameters
    ----------
    LayerVal0 : array_like
        A series value of specific layer attribute, len(LayerVal0) = len(Layers)

    LayerZ0 : array_like
        A series value of specific layer boundary positions, len(LayerZ0) = len(Layers) - 1 

    coord: array_like or fn.coord()
        Position

    width: value 
        specific width, not the Layers width, the transition width

    Returns
    -------
    array_like
        a function of one attribute distributed in different layers
    """
    #
    LayerValFun0 = LayerVal0[0]
    for i1 in range(1, len(LayerVal0)):
        LayerValFun1 = LayerValFun0 + (LayerVal0[i1] - LayerVal0[
            i1 - 1]) * StepWiseFun(1. - coord[1], 1. - LayerZ0[i1 - 1], width)
        LayerValFun0 = LayerValFun1
    return LayerValFun0


def refine_coord1D(xx, nx, MeshSmoothWidth0):
    """Refine coordinate in one direction

    Parameters
    ----------
    xx : array-like
        a series value of split positions 

    nx : array_like
        accumulated points numbers of corresponding xx index

    MeshSmoothWidth0: int, array_like
        recommend max Mesh Smooth Width around split positions      
 
    Returns
    -------
    x : array_like
        A series one dimensional smooth value around split positions
    """
    N = nx[-1] + 1
    x = np.zeros(N)
    if isinstance(MeshSmoothWidth0, int):
        MeshSmoothWidth0 = [MeshSmoothWidth0] * (len(xx) - 2)
    elif len(MeshSmoothWidth0) == 1:
        MeshSmoothWidth0 = MeshSmoothWidth0 * (len(xx) - 2)

    # Average distance between nx[k]
    for k in range(1, len(nx)):
        k2 = range(nx[k - 1], nx[k] + 1)
        x[k2] = np.linspace(xx[k - 1], xx[k], len(k2))

    # Smooth the grid around nx[k]
    for k in range(1, len(nx) - 1):
        if (k == 1):
            MeshSmoothWidth = min(MeshSmoothWidth0[k - 1],
                                  nx[k] - nx[k - 1] - 1,
                                  (nx[k + 1] - nx[k]) / 2 - 1)
        elif (k == len(nx) - 2):
            MeshSmoothWidth = min(MeshSmoothWidth0[k - 1],
                                  (nx[k] - nx[k - 1]) / 2 - 1,
                                  nx[k + 1] - nx[k] - 1)
        else:
            MeshSmoothWidth = min(MeshSmoothWidth0[k - 1],
                                  (nx[k] - nx[k - 1]) / 2 - 1,
                                  (nx[k + 1] - nx[k]) / 2 - 1)

        dx0 = (xx[k] - xx[k - 1]) / ((nx[k] - nx[k - 1]))
        dx1 = (xx[k + 1] - xx[k]) / ((nx[k + 1] - nx[k]))
        k2 = np.arange(nx[k] - MeshSmoothWidth, nx[k] + MeshSmoothWidth + 1)
        #dxGrad=(dx1-dx0)/(2*MeshSmoothWidth+1)
        #dx=dx0+dxGrad*np.arange(1,len(k2))
        phase = math.pi * (k2[1:] - k2[0]) / (2 * MeshSmoothWidth +
                                              1) - math.pi / 2
        dx = dx0 + (dx1 - dx0) * (np.sin(phase) + 1.0) / 2.0
        x[k2[1:]] = x[k2[0]] + np.cumsum(dx)

    return x


def SlabShapeFn(xmin,
                xST,
                yST,
                hSlabCrust,
                hSlabLith,
                SlabRadius,
                hSlabInitial,
                hWeakZone,
                leftExtend,
                h=h):
    """ Slab shape build function, and add the weak zone between upperPlate 
    and lowerPlate.
        Note that the direction of subduction is toward the right
 
    Parameters
    ----------
    xmin: double
        slab xmin

    xST : double
        coord x of curve center

    yST : double
        coord y of curve center

    hSlabCrust: double
        slab crust thickness

    hSlabLith : double 
        slab lithosphere thickness

    SlabRadius : double
        subduction slab curved radius

    hSlabInitial: double
        initial subduction depth relative to the surface

    hWeakZone : double
        Weak zone decoupling the subducting and overriding plates 
        is defined by a line of passive particles embeded 
        hSlabCrust + hWeakZone deep in the oceanic slab

    leftExtend : double
        Extend slab length outside the modeling box

    h: double
        Reference of thickness


    Returns
    -------
    polySlabCircle : fn.Polygon object
        curved part of subduction slab

    polySlabCrust : fn.Polygon object
        slab crust polygon, include curved part
        
    polySlabMantle : fn.polygons object
        slab mantle polygon. include curved part

    lowViStenLine : array_like, 2-dim
         coord x and y of weakzone positions
    
    """
    # slab shape at the subduction zone (the curved part)
    theta = np.linspace(0, np.arccos((1. - hSlabInitial - yST) / SlabRadius),
                        200)
    SlabCrustTop = np.vstack(
        (xST + SlabRadius * np.sin(theta), yST + SlabRadius * np.cos(theta)))
    SlabPlateBot = np.vstack((xST + (SlabRadius - hSlabCrust) * np.sin(theta),
                              yST + (SlabRadius - hSlabCrust) * np.cos(theta)))
    SlabLithBot = np.vstack((xST + (SlabRadius - hSlabLith) * np.sin(theta),
                             yST + (SlabRadius - hSlabLith) * np.cos(theta)))

    # lith and slab polygons in the whole domain from xmin to xmax
    shapeSlabCrust = np.vstack(([[xmin, 1.], SlabCrustTop.T,
                                 np.flipud(SlabPlateBot.T),
                                 [xmin, 1. - hSlabCrust]]))
    shapeSlabMantle = np.vstack(([[xmin, 1. - hSlabCrust], SlabPlateBot.T,
                                  np.flipud(SlabLithBot.T),
                                  [xmin, 1. - hSlabLith]]))

    polySlabCrust = fn.shape.Polygon(shapeSlabCrust)
    polySlabMantle = fn.shape.Polygon(shapeSlabMantle)

    # low viscosity Stencil line
    n1 = int((xST - xmin + leftExtend) * h / 5.0e3)
    n2 = int((xST - xmin + leftExtend + hSlabInitial * 2) * h / 5.0e3)
    lowViStenLine = np.zeros((n2, 2))

    lowViStenLine[0:n1, 0] = np.linspace(xmin - leftExtend + 0.001,
                                         xST - 5.0e3 / h / 2, n1)
    lowViStenLine[0:n1, 1] = 1. - hSlabCrust - hWeakZone

    theta = np.linspace(0, np.arccos((1. - hSlabInitial - yST) / SlabRadius),
                        n2 - n1)
    lowViStenLine[
        n1:n2 + 1,
        0] = xST + (SlabRadius - hSlabCrust - hWeakZone) * np.sin(theta)
    lowViStenLine[
        n1:n2 + 1,
        1] = yST + (SlabRadius - hSlabCrust - hWeakZone) * np.cos(theta)

    # slab circle for temperature
    ShapeSlabCircle = np.vstack(([[xST, yST], SlabCrustTop.T]))
    polySlabCircle = fn.shape.Polygon(ShapeSlabCircle)

    return polySlabCircle, polySlabCrust, polySlabMantle, lowViStenLine


def BlockShapeFn(xST, lenBlock, hBlock):
    """ Block shape build function. 

        Note that you should place the block before Slab because the Slab curved
        part may overlap the Block a little.
 
    TODO: precise shape of the Block
    Parameters
    ----------


    Returns
    -------
    
    """
    blockShape = np.vstack(([[xST + lenBlock, 1.], [xST,
                                                    1.], [xST, 1. - hBlock],
                             [xST + lenBlock, 1. - hBlock]]))
    polyBlock = fn.shape.Polygon(blockShape)

    return polyBlock


def HalfSpaceCooling(Age, tempMin, z, Tm=Tm, tao=tao):
    """ Temperature Field value according to the half space cooling model

    Typically used in oceanic crust 
    
    Parameters
    ----------
    Age: double
        The oceanic crust age in Myr

    tempMin: double
        The surface temperature

    Tm: double
        The reference temperature 
    
    z: function
        the coord[1] in slab, but tmpz in circle, tmpz in original paper.

    tao: constant
        A constant to nondimensionize the Age in Myr


    Returns
    -------
    
    """
    # Age and tao are in myrs
    # z is depth
    T = tempMin + (Tm - tempMin) * math.erf(z / 2 / math.sqrt(Age / tao))
    return T


def DoubleLinearTemp(TM, z, hBlock, tempMin=tempMin, Tm=Tm):
    """ Temperature Field for continental crust 

    The continental lithospheric temperature is defined by double linear segments 
 
    Parameters
    ----------
    TM: constant
        Moho temperature

    z: function
        the location of the position

    hBlock: double
        the actual thickness of the block

    tempMin: double 
        The surface of the contienent block

    Tm: constant
        The reference temperature 


    Returns
    -------
    The temperature series of the continental block 
    
    """

    upperPlateLithThkTemp = 1.5 * hBlock

    if z < hBlock:
        T = tempMin + (TM - tempMin) * z / hBlock
    elif z < upperPlateLithThkTemp:
        T = TM + (Tm - TM) * (z - hBlock) / (upperPlateLithThkTemp - hBlock)
    else:
        T = Tm
    return T


def LowViStenShape(swarmFilename,
                   varFilename,
                   hSlabCrust=hSlabCrust,
                   hWeakZone=hWeakZone,
                   h=h):
    """ Temperature Field value according to the half space cooling model

    Typically used in oceanic crust 
    
    Parameters
    ----------

    swarmFilename: str
        low viscosity swarm filename

    varFilename: str
        low viscosity values filename

    h: constant
        reference thickness

    Returns
    -------
    
    """
    # the low viscosity stencil polygon between the subducting and overriding plates

    f = h5py.File(swarmFilename, 'r')
    f2 = h5py.File(varFilename, 'r')

    # List all groups
    #print("Keys: %s" % f.keys())
    a_group_key = list(f.keys())[0]
    # Get the data
    data = f[a_group_key][()]

    a_group_key = list(f2.keys())[0]
    # Get the data
    dataVar = f2[a_group_key][()]

    logic1 = np.greater_equal(data[:, 1], 1. - 30e3 / h)
    logic2 = np.logical_and(
        np.logical_and(data[:, 1] < 1. - 30e3 / h,
                       data[:, 1] > 1. - 200e3 / h), dataVar[:, 0] == 1)

    ind = np.arange(0, logic1.size)
    inx1 = ind[logic1]
    inx2 = ind[logic2]
    data1A = data[inx1]
    data2A = -data[inx2]

    data1 = data1A[data1A[:, 0].argsort()]
    data2 = -data2A[data2A[:, 1].argsort()]
    k1 = max(len(data1) - 20, 0)
    #lowViLine0=np.vstack((data1[-15:,:],data2))
    lowViLine0 = np.vstack((data1[k1:, :], data2))
    lowViLine1 = lowViLine0.copy()
    lowViLine2 = lowViLine0.copy()

    for index, coord in enumerate(lowViLine0):
        lowViLine1[index, 0] += 3e3 / h
        lowViLine2[index, 0] += hSlabCrust + hWeakZone + 2e3 / h
        lowViLine1[index, 1] = min(1.0, lowViLine0[index, 1] + 3e3 / h)
        lowViLine2[index, 1] = min(
            1.0, lowViLine0[index, 1] + hSlabCrust + hWeakZone + 2e3 / h)

    shapeLowViSten = np.vstack((lowViLine1, lowViLine2[::-1, :]))

    polyLowViSten = fn.shape.Polygon(shapeLowViSten)
    return polyLowViSten


def LowViStenEval():
    # Viscosity in the weak zone polygon is reset as min_viscosity
    swarmLowVisc.save(outputPath + "swarmLowVisc" + str(step).zfill(4) + ".h5")
    lowViscVariable.save(outputPath + "lowViscVariable" + str(step).zfill(4) +
                         ".h5")
    uw.mpi.barrier()

    filename1 = outputPath + "swarmLowVisc" + str(step).zfill(4) + ".h5"
    filename1A = outputPath + "LowViscVariable" + str(step).zfill(4) + ".h5"
    lowViSten = LowViStenShape(filename1, filename1A)

    condition = [(lowViSten, minViscosity), (True, maxViscosity)]

    return fn.branching.conditional(condition).evaluate(swarm)


def DiffuseTemp(tao=tao):
    # the temperature field is diffused for 2 myrs after the initial model setup cause the slab top temperature changes from tempMin to tempMax within one grid
    t_diff_max = 2. / tao #
    t_diff = 0
    while t_diff < t_diff_max:
        dt = 0.9 * advDiff.get_max_dt()
        t_diff += dt
        advDiff.integrate(dt)
        print(dt * tao)

    print(t_diff * tao, ' Myr')

    return


def RidgeSideTemp():
    # The left boundary temperature is set as the ridge temperature is set as a mid-ocean ridge
    for index in mesh.specialSets["MinI_VertexSet"].data[0:-1]:
        if mesh.data[index, 1] < 1.:
            temperatureField.data[index] = tempMax
        else:
            temperatureField.data[index] = tempMin
    return


def InnerVeloBCVx(time, InnerVeloBCVx0, InnerVeloBCVx1, PeriodInnerV):
    # Velocity varies from Vx0 to Vx1 at half period and then goes back to Vx0 at one period.
    Vx = InnerVeloBCVx0 + (InnerVeloBCVx1 - InnerVeloBCVx0) * (
        1.0 + math.cos(2. * math.pi * time / PeriodInnerV + math.pi)) / 2.
    return Vx


def SaveData(step):
    projectorVisc.solve()
    projectorFiniteStrain.solve()
    # Update buoyancy
    projectorBuoyancy.solve()
    projectorDevStress.solve()
    projectorDevStress2nd.solve()
    # Update phase field
    phase410Field.data[:] = fn_phase410.evaluate(mesh)
    phase660Field.data[:] = fn_phase660.evaluate(mesh)

    mHnd = mesh.save(outputPath + "mesh" + str(step).zfill(4) + ".h5")
    temperatureField.save(outputPath + "tempfield" + str(step).zfill(4) +
                          ".h5")
    temperatureDotField.save(outputPath + "tempDotfield" + str(step).zfill(4) +
                             ".h5")
    pHnd = pressureField.save(outputPath + "presfield" + str(step).zfill(4) +
                              ".h5")
    vHnd = velocityField.save(outputPath + "velfield" + str(step).zfill(4) +
                              ".h5")
    s1Hnd = swarm.save(outputPath + "swarm" + str(step).zfill(4) + ".h5")
    plastStrnHnd = finiteStrainField.save(outputPath + "finiteStrainField" +
                                          str(step).zfill(4) + ".h5")
    matHnd = materialVariable.save(outputPath + "material" +
                                   str(step).zfill(4) + ".h5")
    ViHnd = viscField.save(outputPath + "viscfield" + str(step).zfill(4) +
                           ".h5")
    phase410Field.save(outputPath + "phase410field" + str(step).zfill(4) +
                       ".h5")
    phase660Field.save(outputPath + "phase660field" + str(step).zfill(4) +
                       ".h5")
    buoyancyField.save(outputPath + "buoyancyfield" + str(step).zfill(4) +
                       ".h5")
    DevStressField.save(outputPath + "DevStressfield" + str(step).zfill(4) +
                        ".h5")
    DevStress2ndField.save(outputPath + "DevStress2ndfield" +
                           str(step).zfill(4) + ".h5")
    return


def BackViscFormula(coord,
                    viscEFn,
                    viscZFn,
                    RefStrainRate,
                    nsFn,
                    h=h):
    # Background (do not consider plastic yielding) viscosity
    tmp2 = 11.753 * (1.0 - (1.0 - coord[1]) * h / 2890e3) - 14.235 * (
        1.0 - (1.0 - coord[1]) * h / 2890e3) ** 2
    viscositydif = visc0Fn * fn.math.exp(
        (viscEFn + (1.0 - coord[1]) * viscZFn) / visT -
        (viscEFn + viscZFn) / visTm + tmp2) #2890 km
    viscositydis = fn.math.pow(
        (strainRate_2ndInvariant + SRMin) / RefStrainRate,
        (1.0 - nsFn) / nsFn) * fn.math.pow(viscositydif, 1.0 / nsFn)
    viscosity = 1. / (1. / viscositydis + 1. / viscositydif)
    return viscosity
endsnippet

snippet plate "3 layers geometry of plate " b
###
# Plate Geometry

'''IN Y DIRECTION

----------------------------
h${1}PTop
----------------------------   y${1}PTop 

h${1}PMid 

----------------------------   y${1}PMid
h${1}PBot 
----------------------------   y${1}PBot
'''

h${1}P = 100.e3/h0 # subduction plate thickness


h${1}PTop = .25 * h${1}P
h${1}PMid = .5 * h${1}P
h${1}PBot = .25 * h${1}P

y${1}PTop = h${1}PlateTop
y${1}PMid = h${1}PlateTop + h${1}PlateMid
y${1}PBot = h${1}P


''' IN X DIRECTION

									${1}plateLeft							${1}plateRight
									     |													|	
									     |													|				 
									     ----------------------------  


Length: 
500								4000							150										3000~5000                
		
'''

len${1}P = 4000.e3/h0


x${1}PLeft = ${2}
x${1}PRight = ${2} + len${1}P

${0}
endsnippet

snippet mesh 'Create mesh and mesh variables with initalise' b
mesh = uw.mesh.FeMesh_Cartesian(elementType=("Q1/dQ0"),
                                elementRes=(resX, resY),
                                minCoord=(0., 0.),
                                maxCoord=(boxLength, boxHeight),
                                periodic=[False, False])

velocityField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=2)
pressureField = uw.mesh.MeshVariable(mesh=mesh.subMesh, nodeDofCount=1)
temperatureField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
temperatureDotField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
phase410Field = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
phase660Field = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
viscField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
finiteStrainField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
strainRateInvField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
stressInvField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)
buoyancyField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=2)
DevStressField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=3)
DevStress2ndField = uw.mesh.MeshVariable(mesh=mesh, nodeDofCount=1)

velocityField.data[:] = [0., 0.]
pressureField.data[:] = 0.
temperatureField.data[:] = 0.
temperatureDotField.data[:] = 0.
phase410Field.data[:] = 0.
phase660Field.data[:] = 0.
buoyancyField.data[:] = [0., 0.]
DevStressField.data[:] = [0.0, 0.0, 0.0]
DevStress2ndField.data[:] = 0.

with mesh.deform_mesh():
    for index, coord in enumerate(mesh.data):
        if len(xx) > 2:
            index_x = int(mesh.data_nodegId[index] % (resX + 1))
            mesh.data[index][0] = x0[index_x]
        if len(zz) > 2:
            index_y = int(mesh.data_nodegId[index] / (resY + 1))
            mesh.data[index][1] = z0[index_y]

figMesh = vis.Figure(figsize=(1200, 500))
figMesh.append(vis.objects.Mesh(mesh))
figMesh.show()

endsnippet

snippet walls "define the iWalls and jWalls for mesh" b
iWalls = mesh${1}.specialSets['Left_VertexSet'] + mesh${1}.specialSets['Right_VertexSet']
jWalls = mesh${1}.specialSets["Top_VertexSet"] + mesh${1}.specialSets["Bottom_VertexSet"]
bottomWall = mesh.specialSets["MinJ_VertexSet"]
topWall = mesh.specialSets["MaxJ_VertexSet"]

endsnippet

snippet innervel "prescribe the inner velocity" b

InnerVeloBCX = 4.2 
InnerVeloBCY = 1. + 1.0 # No InnerVeloBC
InnerVeloBCVx0 = 2.0e-2 / (365.25 * 24 * 3600) * h / kappa
InnerVeloBCVx1 = -1.0e-2 / (365.25 * 24 * 3600) * h / kappa
InnerVeloNodes = mesh.specialSets["Empty"]
tmp = np.where(
    operator.and_(
        abs(mesh.data[:, 0] - InnerVeloBCX) < 7.0e3 / h,
        abs(mesh.data[:, 1] - InnerVeloBCY) < 80e3 / h))[0]
InnerVeloNodes.add(tmp)
if len(tmp) > 0:
    velocityField.data[tmp, 0] = InnerVeloBCVx(time)
    print('InnerVeloNodes: ', uw.rank(), InnerVeloNodes,
          mesh.data[InnerVeloNodes.data, 0], mesh.data[InnerVeloNodes.data, 1])
uw.mpi.barrier()

VelBC = uw.conditions.DirichletCondition(variable=velocityField,
                                         indexSetsPerDof=(InnerVeloNodes +
                                                          iWalls, jWalls))


endsnippet

snippet swarm "add swarm in the prescribed mesh" b 
swarm = uw.swarm.Swarm(mesh=mesh, particleEscape=True)
swarmLowVisc = uw.swarm.Swarm(
    mesh=mesh, particleEscape=True) # Low viscosity tracer, following Manea
materialVariable = swarm.add_variable(dataType="int", count=1)
LowViscVariable =swarmLowVisc.add_variable(
    dataType="int", count=1) # 0 not counted for low Vi channel, 1 counted
plasticStrain = swarm.add_variable(dataType="double", count=1)
ViscMin = swarm.add_variable(dataType="double", count=1)

swarmLayout = uw.swarm.layouts.PerCellSpaceFillerLayout(
		swarm=swarm, particlesPerCell=20)
#swarmLayout = uw.swarm.layouts.GlobalSpaceFillerLayout( swarm=swarm, particlesPerCell=20 )
swarm.populate_using_layout(layout=swarmLayout)

# create pop control object
pop_control = uw.swarm.PopulationControl(swarm,
                                         deleteThreshold=0.025,
                                         splitThreshold=0.2)

endsnippet
snippet index "material variable index" b

# Allocate materials to particles
MantleIndex = 0
upperPlateCrustIndex = 1
ContUpperMantleLithIndex = 2
lowerPlateCrustIndex = 3
lowerPlateMantleIndex = 4

endsnippet

snippet freeslip "freeslip condition for all walls"
${1}BC = uw.conditions.DirichletCondition(variable=${1},indexSetsPerDof=(iWalls,jWalls))
${0}
endsnippet

snippet noslip "noslip condition for all walls"
${1}BC = uw.conditions.DirichletCondition(variable=${1},indexSetsPerDof=(iWalls+jWalls,iWalls+jWalls))
${0}
endsnippet


